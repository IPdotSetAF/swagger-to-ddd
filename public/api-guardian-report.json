{
  "critical": [
    {
      "type": "ENDPOINT_REMOVED",
      "path": "/api/agents/",
      "message": "Endpoint removed: /api/agents/",
      "impact": "Clients using this endpoint will break",
      "recommendation": "Consider keeping the endpoint and marking it as deprecated, or create a new versioned path (e.g., /v2/api/agents/)"
    },
    {
      "type": "REQUIRED_PROPERTY_REMOVED",
      "path": "/api/agents/update_agent/",
      "method": "PUT",
      "context": "request body schema (application/json)",
      "property": "name",
      "message": "Required property 'name' removed from request body schema (application/json)",
      "impact": "Clients expecting this property will break",
      "recommendation": "Consider keeping the property or introducing versioning"
    },
    {
      "type": "SCHEMA_TYPE_CHANGED",
      "path": "/api/agents/update_agent/",
      "method": "PUT",
      "context": "request body schema (application/json) property 'mem_usage'",
      "oldType": "number",
      "newType": "string",
      "message": "Schema type changed in request body schema (application/json) property 'mem_usage' from 'number' to 'string'",
      "impact": "Clients expecting the old type will break",
      "recommendation": "Consider maintaining the same type or introducing versioning"
    }
  ],
  "warning": [],
  "info": [
    {
      "type": "ENDPOINT_ADDED",
      "path": "/api/agent/",
      "message": "New endpoint added: /api/agent/"
    }
  ],
  "suggestions": [
    {
      "title": "API Versioning",
      "description": "Consider implementing versioning for your API to maintain backward compatibility.",
      "options": [
        "URL path versioning (e.g., /v1/resource, /v2/resource)",
        "Query parameter versioning (e.g., /resource?version=1)",
        "Header versioning (e.g., Accept: application/vnd.api+json;version=1)",
        "Content negotiation (e.g., Accept: application/vnd.api.v1+json)"
      ]
    },
    {
      "title": "Deprecation Strategy",
      "description": "Before removing endpoints or changing behavior, use deprecation notices to inform API consumers.",
      "options": [
        "Add \"Deprecated\" header to responses",
        "Add deprecation notices in API documentation",
        "Keep deprecated endpoints for at least one release cycle",
        "Maintain backward compatibility with defaults"
      ]
    },
    {
      "title": "Endpoint Preservation",
      "description": "Avoid removing endpoints or HTTP methods that clients may depend on.",
      "options": [
        "Keep old endpoints but mark them as deprecated",
        "Create new endpoints alongside existing ones",
        "Implement request routing that handles both old and new patterns"
      ]
    },
    {
      "title": "Parameter/Property Compatibility",
      "description": "Maintain compatibility when changing parameters or properties.",
      "options": [
        "Keep support for old parameter/property names",
        "Make new required fields optional with sensible defaults",
        "Implement request/response transformation to handle different formats"
      ]
    }
  ]
}